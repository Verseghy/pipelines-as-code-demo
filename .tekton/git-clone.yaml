apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/categories: Git
    tekton.dev/displayName: git clone 2
    tekton.dev/pipelines.minVersion: 0.38.0
    tekton.dev/platforms: 'linux/amd64,linux/s390x,linux/ppc64le,linux/arm64'
    tekton.dev/tags: git
  name: git-clone2
spec:
  description: |-
    These Tasks are Git tasks to work with repositories used by other tasks in your Pipeline.
    The git-clone Task will clone a repo from the provided url into the output Workspace. By default the repo will be cloned into the root of your Workspace. You can clone into a subdirectory by setting this Task's subdirectory param. This Task also supports sparse checkouts. To perform a sparse checkout, pass a list of comma separated directory patterns to this Task's sparseCheckoutDirectories param.
  params:
    - description: Repository URL to clone from.
      name: url
      type: string
    - default: ''
      description: 'Revision to checkout. (branch, tag, sha, ref, etc...)'
      name: revision
      type: string
  steps:
    - computeResources: {}
      workingDir: $(workspaces.source.path)
      env:
        - name: PARAM_URL
          value: $(params.url)
        - name: PARAM_REVISION
          value: $(params.revision)
        - name: WORKSPACE_OUTPUT_PATH
          value: $(workspaces.output.path)
      image: 'bitnami/git:2.49.0-debian-12-r6'
      name: clone
      script: |
        #!/usr/bin/env sh
        set -eu

        CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/"

        cleandir() {
          # Delete any existing contents of the repo directory if it exists.
          #
          # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
          # or the root of a mounted volume.
          if [ -d "${CHECKOUT_DIR}" ] ; then
            # Delete non-hidden files and directories
            rm -rf "${CHECKOUT_DIR:?}"/*
            # Delete files and directories starting with . but excluding ..
            rm -rf "${CHECKOUT_DIR}"/.[!.]*
            # Delete files and directories starting with .. plus any other character
            rm -rf "${CHECKOUT_DIR}"/..?*
          fi
        }

        git config --global --add safe.directory "${WORKSPACE_OUTPUT_PATH}"
        git clone "${PARAM_URL}"
        cd "${CHECKOUT_DIR}"
        git reset --hard "${PARAM_REVISION}"

        RESULT_SHA="$(git rev-parse HEAD)"
        EXIT_CODE="$?"
        if [ "${EXIT_CODE}" != 0 ] ; then
          exit "${EXIT_CODE}"
        fi
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
  workspaces:
    - description: The git repo will be cloned onto the volume backing this Workspace.
      name: output
